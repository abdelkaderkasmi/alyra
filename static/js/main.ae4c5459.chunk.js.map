{"version":3,"sources":["components/Intro/Welcome.jsx","components/Intro/index.jsx","components/Profile.jsx","components/Footer.jsx","contexts/useVotingContract.jsx","components/Voter.jsx","components/Voting.jsx","App.jsx","index.js"],"names":["Welcome","className","Intro","Profile","address","useAccount","connect","useConnect","connector","InjectedConnector","disconnect","useDisconnect","useState","accountAddress","setAccountAddress","useEffect","Grid","container","spacing","item","xs","Typography","variant","Button","onClick","Link","uri","text","href","target","rel","Footer","VotingABI","require","abi","useVotingContract","provider","useProvider","config","addressOrName","contractInterface","contractConfig","contractProvider","useContract","signerOrProvider","contractSigner","getSigner","Voter","voteur","workflowStatus","labelWorkflowStatus","winningId","chipCustomClass","useStyles","proposal","setProposal","voter","setVoter","votePending","setVotePending","openDialogOk","setOpenDialogOk","proposalList","setProposalList","proposalSelected","setProposalSelected","addProposal","useContractWrite","functionName","onError","error","console","log","onSuccess","data","voteProposal","useContractEvent","eventName","listener","event","getVoter","then","catch","e","warn","eventFilter","filters","ProposalRegistered","queryFilter","map","args","id","toNumber","getOneProposal","current","description","voteCount","alert","getProposals","Box","sx","width","Collapse","in","Alert","action","IconButton","color","size","fontSize","mb","gutterBottom","Chip","chipCustom","label","hidden","sm","TextareaAutosize","required","name","minRows","style","value","onChange","write","length","hasVoted","FormControl","m","InputLabel","Select","labelId","MenuItem","BigNumber","from","find","prop","votedProposalId","title","columns","options","selectableRows","filter","makeStyles","borderRadius","Voting","WorkflowStatus","isOwner","setIsOwner","setWinningId","workFlowChanging","setWorkFlowChanging","votersList","setVotersList","setWorkflowStatus","setLabelWorkflowStatus","labelNextWorkflowStatus","setLabelNextWorkflowStatus","voterAddress","setVoterAddress","addVoter","slice","getLabelVoteStatus","getLabelVoteAction","owner","ownerAddress","VoterRegistered","eventsVotersRegistered","setUpWeb3","winningProposalID","addVoters","startProposalsRegistering","tx","endProposalsRegistering","startVotingSession","endVotingSession","tallyVotes","disabled","changeToNextWorkFlowStatus","TextField","inputProps","pattern","fullWidth","autoComplete","isRegistered","client","createClient","autoConnect","ethers","providers","Web3Provider","window","ethereum","App","ReactDOM","createRoot","document","getElementById","render","Fragment"],"mappings":"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","file":"static/js/main.ae4c5459.chunk.js","sourcesContent":["function Welcome() {\r\n    return (\r\n        <div className=\"welcome\">\r\n            <h1>👋 Bienvenue sur le projet Voting Alyra 🗳️</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Welcome;\r\n","import Welcome from \"./Welcome\";\r\n\r\nfunction Intro() {\r\n    return (\r\n        <>\r\n            <Welcome/>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Intro;\r\n","import {useAccount, useConnect, useDisconnect} from 'wagmi'\r\nimport {InjectedConnector} from 'wagmi/connectors/injected'\r\nimport {Button, Grid, Typography} from \"@mui/material\";\r\nimport {useEffect, useState} from \"react\";\r\n\r\nfunction Profile() {\r\n    const {address} = useAccount()\r\n    const {connect} = useConnect({\r\n        connector: new InjectedConnector(),\r\n    })\r\n    const {disconnect} = useDisconnect()\r\n    const [accountAddress, setAccountAddress] = useState()\r\n\r\n    useEffect(\r\n        // On veut recupérer les infos du contrat déployé au moment du montage du composant\r\n        // Pour ça on doit déclarer une fonction async dans le hook useEffect\r\n        () => {\r\n            setAccountAddress(address)\r\n        }, [address, accountAddress])\r\n\r\n    if (accountAddress)\r\n        return (\r\n            <Grid container spacing={2}>\r\n                <Grid item xs={8}>\r\n                    <Typography variant=\"h5\">Vous êtes connecté avec le compte <strong>{accountAddress}</strong></Typography>\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <Button variant=\"contained\" onClick={() => disconnect()}>Se déconnecter</Button>\r\n                </Grid>\r\n            </Grid>\r\n        )\r\n    return <Button variant=\"contained\" onClick={() => connect()}>Se connecter à votre wallet</Button>\r\n}\r\n\r\nexport default Profile;\r\n","import {Typography} from \"@mui/material\";\r\n\r\nfunction Link({uri, text}) {\r\n    return (<> <Typography>Version 1.0.0.0 <a href={uri} target=\"_blank\" rel=\"noreferrer\">{text}</a></Typography></>\r\n    )\r\n}\r\n\r\nfunction Footer() {\r\n    return (\r\n        <footer>\r\n            <Link uri={\"https://github.com/eden91940/alyra/tree/main/projects/projet3\"} text={\"GitHub\"}/>\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default Footer;\r\n","import {useContract, useProvider} from 'wagmi';\r\n\r\nconst {abi: VotingABI} = require('../contracts/Voting.json');\r\n\r\nexport function useVotingContract() {\r\n\r\n    const provider = useProvider();\r\n    /*const {signer} = useSigner({\r\n    onSuccess(data) {\r\n        console.log('Success', data)\r\n    },\r\n})\r\n    const [networkSelected, setNetworkSelected] = useState()\r\n    provider.getNetwork().then((network) => {\r\n        setNetworkSelected(network)\r\n    })\r\n\r\n*/\r\n    const config = {\r\n        addressOrName: '0x2dDFae451d7a1058F227B007541Bb310e43e3d57',\r\n        contractInterface: VotingABI,\r\n    };\r\n\r\n    const contractProvider = useContract({\r\n        ...config,\r\n        signerOrProvider: provider,\r\n    });\r\n\r\n    const contractSigner = useContract({\r\n        ...config,\r\n        signerOrProvider: provider.getSigner(),\r\n    });\r\n\r\n\r\n    return {contractConfig: config, contractProvider, contractSigner};\r\n\r\n}","import * as React from \"react\";\r\nimport {useEffect, useState} from \"react\";\r\nimport {Alert, Box, Button, Chip, Collapse, FormControl, Grid, IconButton, InputLabel, MenuItem, Select, TextareaAutosize, Typography} from \"@mui/material\";\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport {useVotingContract} from \"../contexts/useVotingContract\";\r\nimport {useAccount, useContractEvent, useContractWrite} from \"wagmi\";\r\nimport {useStyles} from \"./Voting\";\r\nimport {BigNumber} from \"ethers\";\r\nimport MUIDataTable from \"mui-datatables\";\r\n\r\nfunction Voter({voteur, workflowStatus, labelWorkflowStatus, winningId}) {\r\n\r\n    const chipCustomClass = useStyles();\r\n\r\n    const [proposal, setProposal] = useState('')\r\n    const [voter, setVoter] = useState(voteur)\r\n    const [votePending, setVotePending] = useState(false)\r\n    const [openDialogOk, setOpenDialogOk] = useState(false)\r\n    const [proposalList, setProposalList] = useState([])\r\n    const [proposalSelected, setProposalSelected] = useState('')\r\n    const {contractConfig, contractProvider, contractSigner} = useVotingContract()\r\n    const {address} = useAccount()\r\n    const columnsProposal = [{name: 'id', label: 'Id', width: 70},\r\n        {name: 'description', label: 'Description', width: 130},\r\n        {name: 'voteCount', label: 'Nombre de voix', width: 130}]\r\n\r\n\r\n    const addProposal = useContractWrite({\r\n        ...contractConfig,\r\n        functionName: 'addProposal',\r\n        onError(error) {\r\n            console.log(\"Error add proposal\", error);\r\n        },\r\n        onSuccess(data) {\r\n            setOpenDialogOk(true)\r\n            setProposal('')\r\n            console.log(\"Success addProposal\", data);\r\n        }\r\n    })\r\n\r\n    const voteProposal = useContractWrite({\r\n        ...contractConfig,\r\n        functionName: 'setVote',\r\n        onError(error) {\r\n            console.log(\"Error vote proposal\", error);\r\n            setVotePending(false)\r\n        },\r\n        onSuccess(data) {\r\n            setProposalSelected('')\r\n            console.log(\"Success voteProposal\", data);\r\n        }\r\n    })\r\n\r\n    // Permet d'écouter un event d'enregistrement d'un voter pour mettre à jour le tableau\r\n    useContractEvent({\r\n        ...contractConfig,\r\n        eventName: 'Voted',\r\n        listener: (event) => {\r\n            // 👇️ push to end of state array\r\n            contractSigner.getVoter(address).then((voter) => {\r\n                console.log(\"update voter\")\r\n                setVoter(voter);\r\n                setVotePending(false)\r\n            }).catch(function (e) {\r\n                console.warn(\"Vous ne pouvez pas voter - \", e);\r\n            })\r\n        },\r\n    })\r\n\r\n    // Rendu initial du composant\r\n    useEffect(\r\n        () => {\r\n            async function getProposals() {\r\n                try {\r\n\r\n                    // on récupère tous les id de propositions enregistrées via l'event ProposalRegistered\r\n                    let eventFilter = contractProvider.filters.ProposalRegistered()\r\n                    let eventsProposalRegistered = await contractProvider.queryFilter(eventFilter)\r\n                    eventsProposalRegistered.map(async ({args}) => {\r\n                        const id = args[0].toNumber();\r\n                        const proposal = await contractSigner.getOneProposal(id)\r\n                        setProposalList(current => [...current, {id: id, description: proposal.description, voteCount: proposal.voteCount.toNumber()}]);\r\n                    })\r\n\r\n                } catch (error) {\r\n                    alert(`Failed to load web3, accounts, or contract. Check console for details.`,);\r\n                    console.error(error);\r\n                }\r\n            }\r\n\r\n            setOpenDialogOk(false)\r\n            getProposals();\r\n\r\n            // 👇️ push to end of state array\r\n            contractSigner.getVoter(address).then((voter) => {\r\n                console.log(\"update voter\")\r\n                setVoter(voter);\r\n                setVotePending(false)\r\n            }).catch(function (e) {\r\n                console.warn(\"Vous ne pouvez pas voter - \", e);\r\n            })\r\n\r\n\r\n        },\r\n        [address]\r\n    );\r\n\r\n    const addProposals = () => {\r\n\r\n        if (proposal) {\r\n            console.log(\"Ajout proposition : \" + proposal);\r\n            addProposal.write({\r\n                args: proposal\r\n            })\r\n        }\r\n\r\n    };\r\n\r\n    const handleChangePropal = (event) => {\r\n        setProposalSelected(event.target.value);\r\n    };\r\n\r\n\r\n    const voterPourUneProposition = () => {\r\n\r\n        //TODO comprendre ce param bug à 0\r\n        if (proposalSelected !== '' || proposalSelected === 0) {\r\n            console.log(\"Vote pour : \" + proposalSelected);\r\n            setVotePending(true)\r\n            voteProposal.write({\r\n                args: proposalSelected === 0 ? BigNumber.from(proposalSelected) : proposalSelected\r\n            })\r\n        } else {\r\n            alert(\"Vous devez voter pour une proposition !\")\r\n        }\r\n\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Box sx={{width: '100%'}}>\r\n                <Collapse in={openDialogOk}>\r\n                    <Alert\r\n                        action={\r\n                            <IconButton\r\n                                aria-label=\"close\"\r\n                                color=\"inherit\"\r\n                                size=\"small\"\r\n                                onClick={() => {\r\n                                    setOpenDialogOk(false);\r\n                                }}\r\n                            >\r\n                                <CloseIcon fontSize=\"inherit\"/>\r\n                            </IconButton>\r\n                        }\r\n                        sx={{mb: 2}}\r\n                    >\r\n                        Votre proposition a été prise en compte !\r\n                    </Alert>\r\n                </Collapse>\r\n            </Box>\r\n            <Grid container spacing={5}>\r\n                <Grid item xs={12}>\r\n                    <Typography variant=\"h5\" gutterBottom>\r\n                        Vous êtes un <strong>électeur</strong>. La session est à <Chip className={chipCustomClass.chipCustom} size=\"medium\" color={\"primary\"}\r\n                                                                                       label={labelWorkflowStatus}/>\r\n                    </Typography>\r\n                    <Typography variant=\"h6\" gutterBottom hidden={workflowStatus > 0}>\r\n                        Veuillez attendre l'enregistrement des propositions.\r\n                    </Typography>\r\n                    <Typography variant=\"h6\" gutterBottom hidden={workflowStatus !== 2}>\r\n                        Veuillez attendre l'ouverture du vote.\r\n                    </Typography>\r\n                    <Typography variant=\"h6\" gutterBottom hidden={workflowStatus !== 4}>\r\n                        Veuillez attendre le dépouillement\r\n                    </Typography>\r\n                </Grid>\r\n                {workflowStatus === 1 && <>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <TextareaAutosize\r\n                            required\r\n                            id=\"proposal\"\r\n                            name=\"proposal\"\r\n                            minRows={3}\r\n                            label=\"Saisir une proposition\"\r\n                            style={{width: 400}}\r\n                            variant=\"standard\"\r\n                            value={proposal}\r\n                            onChange={(event) => {\r\n                                setProposal(event.target.value)\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <Button variant=\"contained\" onClick={addProposals}>Ajouter</Button>\r\n                    </Grid>\r\n                </>}\r\n                {workflowStatus === 3 && proposalList.length > 0 && !voter?.hasVoted && <>\r\n                    <Grid item xs={12} sm={6} hidden={votePending}>\r\n                        <FormControl sx={{m: 1, width: 400}}>\r\n                            <InputLabel id=\"proposalSelect\">Sélectionner votre proposition préférée</InputLabel>\r\n                            <Select\r\n                                labelId=\"proposalSelect\"\r\n                                id=\"proposalSelect\"\r\n                                onChange={handleChangePropal}\r\n                                value={proposalSelected}\r\n                            >\r\n                                {proposalList.map((proposal) => (\r\n                                    <MenuItem\r\n                                        key={proposal.id}\r\n                                        value={proposal.id}>\r\n                                        {proposal.id + \"-\" + proposal.description}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} hidden={votePending}>\r\n                        <Button variant=\"contained\" onClick={voterPourUneProposition}>Voter</Button>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={12} hidden={!votePending}>\r\n                        Votre vote va être pris en compte quelques secondes après confirmation...\r\n                    </Grid>\r\n\r\n                </>}\r\n                {voter?.hasVoted && proposalList.length > 0 && <>\r\n                    <Grid item xs={12}>\r\n                        <Typography variant=\"h5\" gutterBottom>\r\n                            Vous avez déjà voté pour la proposition : <Chip className={chipCustomClass.chipCustom}\r\n                                                                            label={proposalList.find(prop => prop.id === voter?.votedProposalId.toNumber())?.description}\r\n                                                                            variant=\"outlined\"/>\r\n\r\n                        </Typography>\r\n                    </Grid></>}\r\n                <Grid item xs={12} hidden={workflowStatus !== 5}>\r\n                    Le vote est clos et la proposition gagnante est la <Chip className={chipCustomClass.chipCustom} color=\"success\"\r\n                                                                             label={winningId + \" - \" + proposalList.find(prop => prop.id === winningId)?.description}/>\r\n                </Grid>\r\n                <Grid item xs={12} hidden={proposalList && workflowStatus !== 5}>\r\n                    <MUIDataTable\r\n                        title={\"Liste des résultats\"}\r\n                        data={proposalList}\r\n                        columns={columnsProposal}\r\n                        options={{\r\n                            selectableRows: \"none\", // <===== will turn off checkboxes in rows\r\n                            filter: false // <===== will turn off checkboxes in rows\r\n                        }}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Voter;\r\n","import {useAccount, useContractEvent, useContractWrite} from 'wagmi'\r\nimport * as React from \"react\";\r\nimport {useEffect, useState} from \"react\";\r\nimport {Button, Chip, Grid, TextField, Typography} from \"@mui/material\";\r\nimport {useVotingContract} from \"../contexts/useVotingContract\";\r\nimport MUIDataTable from \"mui-datatables\";\r\nimport Voter from \"./Voter\";\r\nimport {makeStyles} from \"@mui/styles\";\r\n\r\nexport const useStyles = makeStyles(() => ({\r\n    chipCustom: {\r\n        borderRadius: '9px', //some style\r\n        '& .MuiChip-label': {fontSize: 14}, // sub-selector\r\n    },\r\n}));\r\n\r\nfunction Voting() {\r\n\r\n    const WorkflowStatus = {\r\n        RegisteringVoters: 0,\r\n        ProposalsRegistrationStarted: 1,\r\n        ProposalsRegistrationEnded: 2,\r\n        VotingSessionStarted: 3,\r\n        VotingSessionEnded: 4,\r\n        VotesTallied: 5\r\n    }\r\n\r\n\r\n    const chipCustomClass = useStyles();\r\n    const [isOwner, setIsOwner] = useState(false)\r\n    const [winningId, setWinningId] = useState()\r\n    const [workFlowChanging, setWorkFlowChanging] = useState(false)\r\n    const [voter, setVoter] = useState(null)\r\n    const [votersList, setVotersList] = useState([])\r\n    const [workflowStatus, setWorkflowStatus] = useState(null)\r\n    const [labelWorkflowStatus, setLabelWorkflowStatus] = useState(null)\r\n    const [labelNextWorkflowStatus, setLabelNextWorkflowStatus] = useState(null)\r\n    const [voterAddress, setVoterAddress] = useState('')\r\n    const {address} = useAccount()\r\n\r\n    const {contractConfig: config, contractProvider, contractSigner} = useVotingContract()\r\n    const columns = [\"Adresse\"];\r\n\r\n    const addVoter = useContractWrite({\r\n        ...config,\r\n        functionName: 'addVoter',\r\n        onError(error) {\r\n            console.log(\"Error add voter\", error);\r\n        },\r\n        onSuccess(data) {\r\n            setVoterAddress('')\r\n            console.log(\"Success add voter\", data);\r\n        }\r\n    });\r\n\r\n    // Permet d'écouter un event d'enregistrement d'un voter pour mettre à jour le tableau\r\n    useContractEvent({\r\n        ...config,\r\n        eventName: 'VoterRegistered',\r\n        listener: (event) => {\r\n            // 👇️ push to end of state array\r\n            setVotersList(current => [...current, event.slice(0, event.length - 1)]);\r\n            //on vérifie si on est un électeur\r\n            contractSigner.getVoter(address).then((voter) => {\r\n                setVoter(voter)\r\n            }).catch(function (e) {\r\n                setVoter(null)\r\n                console.warn(\"Vous ne pouvez pas voter - \", e);\r\n            })\r\n        },\r\n    })\r\n\r\n    useContractEvent({\r\n        ...config,\r\n        eventName: 'WorkflowStatusChange',\r\n        listener: async (event) => {\r\n            const workflowStatus = await contractProvider.workflowStatus();\r\n            setWorkflowStatus(workflowStatus)\r\n            setLabelWorkflowStatus(getLabelVoteStatus(workflowStatus))\r\n            setLabelNextWorkflowStatus(getLabelVoteAction(workflowStatus))\r\n            setWorkFlowChanging(false);\r\n        }\r\n    })\r\n\r\n    // Rendu initial du composant\r\n    useEffect(\r\n        // On veut recupérer les infos du contrat déployé au moment du montage du composant\r\n        // Pour ça on doit déclarer une fonction async dans le hook useEffect\r\n        () => {\r\n            async function setUpWeb3() {\r\n\r\n                try {\r\n                    //on vérifie si on est propriétaire\r\n                    const ownerAddress = await contractProvider.owner();\r\n                    setIsOwner(ownerAddress === address)\r\n\r\n                    //on vérifie si on est un électeur\r\n                    try {\r\n                        const voter = await contractSigner.getVoter(address)\r\n                        setVoter(voter)\r\n                    } catch (e) {\r\n                        setVoter(null)\r\n                        console.warn(\"Vous ne pouvez pas voter - \", e);\r\n                    }\r\n\r\n                    //on récupère le status du workflow\r\n                    const workflowStatus = await contractProvider.workflowStatus();\r\n                    setWorkflowStatus(workflowStatus)\r\n                    setLabelWorkflowStatus(getLabelVoteStatus(workflowStatus))\r\n                    setLabelNextWorkflowStatus(getLabelVoteAction(workflowStatus))\r\n\r\n\r\n                    // on récupère tous les votants enregistrés via l'event VoterRegistered\r\n                    let eventFilter = contractProvider.filters.VoterRegistered()\r\n                    let eventsVotersRegistered = await contractProvider.queryFilter(eventFilter)\r\n                    setVotersList(eventsVotersRegistered.map(({args}) => {\r\n                        return [args[0]];\r\n                    }))\r\n\r\n\r\n                } catch (error) {\r\n                    alert(`Failed to load web3, accounts, or contract. Check console for details.`,);\r\n                    console.error(error);\r\n                }\r\n            }\r\n\r\n            // On doit executer la fonction async\r\n            setUpWeb3();\r\n\r\n        },\r\n        [address]\r\n    );\r\n\r\n    useEffect(\r\n        () => {\r\n            contractProvider.winningProposalID().then((winningId) => {\r\n                setWinningId(winningId.toNumber());\r\n            })\r\n        },\r\n        [workflowStatus]\r\n    );\r\n\r\n\r\n    const addVoters = () => {\r\n\r\n        if (voterAddress) {\r\n            console.log(\"Ajout adresse : \" + voterAddress);\r\n            addVoter.write({\r\n                args: voterAddress\r\n            });\r\n        } else {\r\n            alert(\"Veuillez saisir une adresse\")\r\n        }\r\n\r\n    };\r\n\r\n\r\n    function getLabelVoteStatus(workflowStatus) {\r\n        switch (workflowStatus) {\r\n            case WorkflowStatus.RegisteringVoters:\r\n                return \"Enregistrement des votants\";\r\n            case WorkflowStatus.ProposalsRegistrationStarted:\r\n                return \"Enregistrement des propositions\";\r\n            case WorkflowStatus.ProposalsRegistrationEnded:\r\n                return \"Fin des enregistrements des propositions\";\r\n            case WorkflowStatus.VotingSessionStarted:\r\n                return \"Vote demarré\";\r\n            case WorkflowStatus.VotingSessionEnded:\r\n                return \"Vote terminé\";\r\n            case WorkflowStatus.VotesTallied:\r\n                return \"Dépouillement effectué\";\r\n            default:\r\n                return \"en attente des infos du contrat\";\r\n        }\r\n    }\r\n\r\n    function getLabelVoteAction(workflowStatus) {\r\n        switch (workflowStatus) {\r\n            case WorkflowStatus.RegisteringVoters:\r\n                return \"Enregistrer les propositions\";\r\n            case WorkflowStatus.ProposalsRegistrationStarted:\r\n                return \"Terminer l'enregistrement des propositions\";\r\n            case WorkflowStatus.ProposalsRegistrationEnded:\r\n                return \"Démarrer le vote\";\r\n            case WorkflowStatus.VotingSessionStarted:\r\n                return \"Mettre fin au vote\";\r\n            case WorkflowStatus.VotingSessionEnded:\r\n                return \"Lancer le dépouillement\";\r\n            default:\r\n                return \"en attente des infos du contrat\";\r\n        }\r\n    }\r\n\r\n    async function changeToNextWorkFlowStatus() {\r\n\r\n        setWorkFlowChanging(true)\r\n        switch (workflowStatus) {\r\n            case WorkflowStatus.RegisteringVoters:\r\n                contractSigner.startProposalsRegistering().then((tx) => {\r\n                }).catch(function (e) {\r\n                    setWorkFlowChanging(false);\r\n                    console.error(e);\r\n                    alert(\"Le changement d'état n'a pas été effectué\")\r\n                })\r\n                break\r\n            case WorkflowStatus.ProposalsRegistrationStarted:\r\n                contractSigner.endProposalsRegistering().then((tx) => {\r\n                }).catch(function (e) {\r\n                    setWorkFlowChanging(false);\r\n                    console.error(e);\r\n                    alert(\"Le changement d'état n'a pas été effectué\")\r\n                })\r\n                break\r\n            case WorkflowStatus.ProposalsRegistrationEnded:\r\n                contractSigner.startVotingSession().then((tx) => {\r\n                }).catch(function (e) {\r\n                    setWorkFlowChanging(false);\r\n                    console.error(e);\r\n                    alert(\"Le changement d'état n'a pas été effectué\")\r\n                })\r\n                break\r\n            case WorkflowStatus.VotingSessionStarted:\r\n                contractSigner.endVotingSession().then((tx) => {\r\n                }).catch(function (e) {\r\n                    setWorkFlowChanging(false);\r\n                    console.error(e);\r\n                    alert(\"Le changement d'état n'a pas été effectué\")\r\n                })\r\n                break\r\n            case WorkflowStatus.VotingSessionEnded:\r\n                contractSigner.tallyVotes().then((tx) => {\r\n                }).catch(function (e) {\r\n                    setWorkFlowChanging(false);\r\n                    console.error(e);\r\n                    alert(\"Le changement d'état n'a pas été effectué\")\r\n                })\r\n                break\r\n            default:\r\n                console.error(\"changement d'étape impossible\")\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                (() => {\r\n                    if (isOwner) {\r\n                        return (\r\n                            <React.Fragment>\r\n                                <Grid container spacing={5}>\r\n                                    <Grid item xs={12}>\r\n                                        <Typography variant=\"h5\" gutterBottom>\r\n                                            Vous êtes <strong>propriétaire du contrat</strong> et la session est au stade <Chip className={chipCustomClass.chipCustom} size=\"medium\"\r\n                                                                                                                                color={\"primary\"}\r\n                                                                                                                                label={labelWorkflowStatus}/>\r\n\r\n                                        </Typography>\r\n                                    </Grid>\r\n                                    <Grid item xs={12} hidden={workflowStatus > 4}>\r\n                                        Passer à l'étape <Button variant=\"contained\" disabled={workFlowChanging}\r\n                                                                 onClick={() => {\r\n                                                                     changeToNextWorkFlowStatus()\r\n                                                                 }}>{labelNextWorkflowStatus}</Button>\r\n                                    </Grid>\r\n                                    {workflowStatus === 0 && <>\r\n                                        <Grid item xs={12} sm={6}>\r\n                                            <TextField\r\n                                                required\r\n                                                inputProps={{pattern: \"^0x[a-fA-F0-9]{40}$\"}}\r\n                                                id=\"address\"\r\n                                                name=\"address\"\r\n                                                label=\"Adresse d'un électeur\"\r\n                                                fullWidth\r\n                                                autoComplete=\"shipping address\"\r\n                                                variant=\"standard\"\r\n                                                value={voterAddress}\r\n                                                onChange={(event) => {\r\n                                                    setVoterAddress(event.target.value)\r\n                                                }}\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item xs={12} sm={6}>\r\n                                            <Button variant=\"contained\" onClick={addVoters}>Ajouter</Button>\r\n                                        </Grid>\r\n                                    </>}\r\n                                    <Grid item xs={12}>\r\n                                        <MUIDataTable\r\n                                            title={\"Liste des votants\"}\r\n                                            data={votersList}\r\n                                            columns={columns}\r\n                                            options={{\r\n                                                selectableRows: \"none\", // <===== will turn off checkboxes in rows\r\n                                                filter: false // <===== will turn off checkboxes in rows\r\n                                            }}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item xs={12} hidden={workflowStatus !== 5}>\r\n                                        Le vote est clos et la proposition gagnante est celle avec l'id <strong>{winningId}</strong>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <hr/>\r\n                                {voter?.isRegistered &&\r\n                                    <Voter voteur={voter} workflowStatus={workflowStatus} labelWorkflowStatus={labelWorkflowStatus} winningId={winningId}/>\r\n                                }\r\n                            </React.Fragment>\r\n                        )\r\n                    } else if (address && voter && voter.isRegistered) {\r\n                        return (\r\n                            <Voter voteur={voter} workflowStatus={workflowStatus} labelWorkflowStatus={labelWorkflowStatus} winningId={winningId}/>\r\n                        )\r\n                    } else if (address) {\r\n                        return <div>Vous n'êtes pas enregistré sur le projet Voting</div>;\r\n                    } else {\r\n                        return <div>Veuillez vous connecter</div>;\r\n                    }\r\n                })()\r\n            }\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Voting;\r\n","import Intro from \"./components/Intro/\";\r\nimport Profile from \"./components/Profile\";\r\nimport Footer from \"./components/Footer\";\r\nimport \"./App.css\";\r\nimport {createClient, WagmiConfig} from 'wagmi'\r\nimport {ethers} from 'ethers'\r\nimport Voting from \"./components/Voting\";\r\n\r\n\r\nconst client = createClient({\r\n    autoConnect: true,\r\n    provider: new ethers.providers.Web3Provider(window.ethereum),\r\n})\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <div id=\"App\">\r\n            <div className=\"container\">\r\n                <WagmiConfig client={client}>\r\n                    <Intro/>\r\n                    <hr/>\r\n                    <Profile/>\r\n                    <hr/>\r\n                    <Voting/>\r\n                    <hr/>\r\n                    <Footer/>\r\n                </WagmiConfig>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n    <React.Fragment>\r\n        <App/>\r\n    </React.Fragment>\r\n);\r\n"],"sourceRoot":""}